const express = require("express");
const http = require("http");
const cors = require("cors");
const { Server } = require("socket.io");

const app = express();
app.use(cors()); // Cho ph√©p truy c·∫≠p t·ª´ domain kh√°c (React frontend)

const server = http.createServer(app);

const io = new Server(server, {
    cors: {
        origin: "*", // Khi deploy h√£y ƒë·ªïi sang domain th·∫≠t
        methods: ["GET", "POST"]
    }
});

// L∆∞u th√¥ng tin ph√≤ng
const rooms = {};
function checkWin(board, x, y, symbol) {
    const SIZE = board.length;
    const directions = [
        [1, 0],  // ngang
        [0, 1],  // d·ªçc
        [1, 1],  // ch√©o ch√≠nh
        [1, -1], // ch√©o ph·ª•
    ];

    for (const [dx, dy] of directions) {
        let count = 1;

        for (let dir = -1; dir <= 1; dir += 2) {
            let i = 1;
            while (true) {
                const nx = x + dx * i * dir;
                const ny = y + dy * i * dir;

                if (nx >= 0 && ny >= 0 && nx < SIZE && ny < SIZE && board[nx][ny] === symbol) {
                    count++;
                    i++;
                } else {
                    break;
                }
            }
        }

        if (count >= 5) return true;
    }

    return false;
}

io.on("connection", (socket) => {
    console.log("User connected: " + socket.id);

    socket.on("createRoom", (callback) => {
        const roomId = Math.random().toString(36).substr(2, 6).toUpperCase();
        rooms[roomId] = {
            players: [socket.id],
            board: Array(15).fill(null).map(() => Array(15).fill(null)),
        };
        socket.join(roomId);
        callback(roomId);
        console.log(`Room created: ${roomId}`);
    });

    socket.on("joinRoom", (roomId, callback) => {
        socket.join(roomId);
        const room = io.sockets.adapter.rooms.get(roomId);
        console.log(`üîó Ng∆∞·ªùi ch∆°i ${socket.id} ƒë√£ join ph√≤ng ${roomId}. S·ªë ng∆∞·ªùi trong ph√≤ng: ${room.size}`);
        if (room.size === 2) {
            io.to(roomId).emit("playersReady"); // g·ª≠i t·ªõi c·∫£ 2 ng∆∞·ªùi ch∆°i
        }
        callback({ success: true });
    });

    socket.on("makeMove", ({ roomId, x, y, symbol, playerName }) => {
        // L·∫•y th√¥ng tin ph√≤ng t·ª´ bi·∫øn rooms
        const room = rooms[roomId];
        // N·∫øu ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c √¥ ƒë√£ c√≥ qu√¢n th√¨ b·ªè qua
        if (!room || room.board[x][y]) return;
        // 1. C·∫≠p nh·∫≠t b√†n c·ªù v·ªõi n∆∞·ªõc ƒëi m·ªõi c·ªßa ng∆∞·ªùi ch∆°i
        room.board[x][y] = symbol;
        // 2. G·ª≠i n∆∞·ªõc ƒëi cho t·∫•t c·∫£ client trong ph√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
        io.to(roomId).emit("moveMade", {
            x,
            y,
            symbol,
            nextTurn: room.currentTurn // l∆∞·ª£t hi·ªán t·∫°i (ch∆∞a c·∫≠p nh·∫≠t)
        });
        // 3. Ki·ªÉm tra xem n∆∞·ªõc ƒëi v·ª´a r·ªìi c√≥ th·∫Øng kh√¥ng
        if (checkWin(room.board, x, y, symbol)) {
            // N·∫øu th·∫Øng, g·ª≠i th√¥ng b√°o k·∫øt th√∫c game k√®m t√™n ng∆∞·ªùi th·∫Øng v·ªÅ client
            io.to(roomId).emit("gameOver", { winner: symbol, winnerName: playerName });
            return; // K·∫øt th√∫c x·ª≠ l√Ω, kh√¥ng c·∫ßn g·ª≠i moveMade ti·∫øp theo
        }
        // 4. N·∫øu ch∆∞a th·∫Øng, c·∫≠p nh·∫≠t l∆∞·ª£t ti·∫øp theo cho ph√≤ng
        room.currentTurn = symbol === "X" ? "O" : "X";
        // 5. G·ª≠i l·∫°i n∆∞·ªõc ƒëi cho client v·ªõi l∆∞·ª£t m·ªõi (d√≤ng n√†y th·ª±c ra b·ªã d∆∞, ch·ªâ c·∫ßn g·ª≠i moveMade 1 l·∫ßn ·ªü tr√™n l√† ƒë·ªß)
        io.to(roomId).emit("moveMade", {
            x,
            y,
            symbol,
            nextTurn: room.currentTurn
        });
    });

    socket.on("disconnect", () => {
        console.log("User disconnected: " + socket.id);
        for (const roomId in rooms) {
            const room = rooms[roomId];
            if (room.players.includes(socket.id)) {
                io.to(roomId).emit("playerLeft");
                delete rooms[roomId];
                break;
            }
        }
    });
});

server.listen(3001, () => {
    console.log("Server is running on port 3001");
});
